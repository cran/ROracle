dnl
dnl $Id: configure.in,v 1.5 2004/01/30 13:50:45 dj Exp dj $
dnl
dnl Generate a "configure" script that will install the ROracle package.
dnl Usage:  autotconf
dnl
dnl Compiling an Oracle application can be tricky.  Compiling an application
dnl that needs both R and Oracle headers and libraries can be even
dnl trickier.  So we'll stick closely to the recommended makefiles and
dnl procedures by both Oracle and R.  The logic is very simple:
dnl
dnl 1. Define ORA_VERSION. By default it's 9.  This is needed to find out
dnl    where the env_precomp.mk makefile resides (I believe Oracle 9
dnl    uses the same location).  Users specify the version number with
dnl        --with-oracle=7|8|[9]|10
dnl
dnl 2. Run a simple make only using the Oracle facilities to query
dnl    the libraries (and their order) that we need to link against.
dnl    This run compiles nothing.  It links nothing. It only prints
dnl    the correct list of libraries for linking.
dnl    [Introduced in 0.5-2] We do allow the user to override the 
dnl    32- or 64-bit version of the Oracle with 
dnl        --enable-oracle32=default|yes|no
dnl    where:
dnl      "default"   links against whatever the Oracle installation uses
dnl      "yes"       links explicitly against the oracle's "lib32"; 
dnl      "no"        links explicitly against the "lib64" libraries.
dnl
dnl 3. Define the PKG_CPPFLAGS and PKG_LIBS from above.
dnl    PKG_CPPFLAGS=    
dnl    PKG_LIBS = `cat oracle.libs`
dnl 
dnl As of ROracle 0.5-4 we added an "--enable-extralibs=-lsqlplus" as a 
dnl workaround to a faulty(?) libclntsh.so library not defining the 
dnl "sqla" symbol.
dnl

AC_INIT(src/RS-Oracle.pc)

AC_PROG_CPP

if test -z "${ORACLE_HOME}" ; then
   echo ""
   echo "${R_PACKAGE_NAME} configuration error:"
   echo ""
   echo "   You must set the shell variable ORACLE_HOME to the"
   echo "   directory where Oracle resides and re-run R CMD INSTALL"
   echo "   e.g., (using Bourne shell syntax):"
   echo ""
   echo "      export ORACLE_HOME=/opt/oracle"
   echo "      R CMD INSTALL ${R_PACKAGE_NAME}"
   echo ""
   exit 1
fi

if test ! -f "${ORACLE_HOME}/bin/proc" ; then
   echo "${R_PACKAGE_NAME} configuration warning:"
   echo "Oracle pre-compiler proc not in ${ORACLE_HOME}/bin/proc"
   echo "you may not be able to compile ${R_PACKAGE_NAME}"
   echo ""
fi

PATH="${PATH}":"${ORACLE_HOME}"/bin

#
# What version of Oracle do we have (defaults to Oracle8)
#
AC_ARG_WITH(oracle,
   [--with-oracle=VERSION     Oracle version (7/8/[9]/10) installation],
   ORA_VERSION="${with_oracle}",
   ORA_VERSION=9)

case "${ORA_VERSION}" in 
  7*)  ORA_MAKE="${ORACLE_HOME}/precomp/env_precomp.mk"    ;;
  8*)  ORA_MAKE="${ORACLE_HOME}/precomp/lib/env_precomp.mk";;
  9*)  ORA_MAKE="${ORACLE_HOME}/precomp/lib/env_precomp.mk";;
  10*) ORA_MAKE="${ORACLE_HOME}/precomp/lib/env_precomp.mk";;
  *)  AC_MSG_ERROR([unrecognized Oracle version ${VERSION}]) ;;
esac

#
# static or shared link to oracle's libraries? New (as of 0.5-4) default 
# is "static" (use -enable-static=no for dynamic).
#
AC_ARG_ENABLE(static,
   [--enable-static=[yes|no]  use static linking to Oracle libraries
                          ('yes' by default)])
if test -z "${enable_static}" -o "${enable_static}" = "yes" ; then
   load="static"
else
   load="shared"
fi

#
# Should we use the default "lib" subdirectories, "lib32" or "lib64" ?
#
AC_ARG_ENABLE(oracle32,
   [--enable-oracle32=arg     use Oracle 32-bit libs?  arg can be
                          'yes' to use 32-bit libs, 
                          'no' to use 64-bit libs, or
                          'default' to use Oracle's own default libs)],
   ORA_LIB="${enable_oracle32}",
   ORA_LIB=default)

case "${ORA_LIB}" in 
  default) ORA_LIB=lib;;
  yes)     ORA_LIB=lib32;;
  no)      ORA_LIB=lib64;;
  *)       AC_MSG_ERROR([unrecognized Oracle libs ${ORA_LIB}]);;
esac

#
# On some Linux systems, apparently the libclntsh.so is incorrectly(?)
# created/installed and it does not have the "sqla" symbol.  Adding
# -lsqlplus seems to be a good workaround.
AC_ARG_ENABLE(extralibs,
   [--enable-extralibs=[-lsqlplus] list of extra libs to link,
                          a workaround for some Oracle 9 Linux installations])
test "${enable_extralibs}" = yes &&  enable_extralibs="-lsqlplus"
test "${enable_extralibs}" = no  &&  enable_extralibs=""

#
# compute the list of Oracle libraries we need to hand off to R SHLIB
#
tmp_makefile=/tmp/oraLibs$$.mk
trap 'rm -f ${tmp_makefile}' 1 2 3 9 15

cat > ${tmp_makefile} <<!

include ${ORA_MAKE}

SHLIBS = -L\$(ORACLE_HOME)/${ORA_LIB} -L\$(ORACLE_HOME)/network/${ORA_LIB} \$(PROLDLIBS)
STLIBS = -L\$(ORACLE_HOME)/${ORA_LIB} -L\$(ORACLE_HOME)/network/${ORA_LIB} \$(STATICPROLDLIBS)

shared:
	@echo \$(SHLIBS)
static:
	@echo \$(STLIBS)
!

if test -z "${PKG_LIBS}" ; then
   PKG_LIBS=`make -f "${tmp_makefile}" "${load}"` 
   PKG_LIBS="${PKG_LIBS} ${enable_extralibs}"
   export PKG_LIBS 
   rm -rf "${tmp_makefile}"
fi

if test -z "${PKG_CPPFLAGS}" ; then
   PKG_CPPFLAGS=""
fi

R_HOME_DIR=`R RHOME`

AC_SUBST(PKG_CPPFLAGS)
AC_SUBST(PKG_LIBS)
AC_SUBST(R_HOME_DIR)

AC_OUTPUT(src/Makevars src/Makefile)

