<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
<s-topic>MySQL</s-topic>
</s-topics>
<s-title>
Instantiate a MySQL client from the current R or S session
</s-title>
<s-description>
This function creates and initializes a MySQL client.
It returns an object that allows you to connect
to one or several MySQL servers.
</s-description>
<s-usage>
<s-old-style-usage>
dbManager("MySQL", max.con = 10, fetch.default.rec = 500,
           force.reload = F)

MySQL(max.con = 10, fetch.default.rec = 500, force.reload = F)
</s-old-style-usage>
</s-usage>
<s-args-optional>
  <s-arg name= max.con >
  maximum number of connections that we intended to have open.
  This can be up to 100, a limit defined at compilation time.
  Strictly speaking this limit applies to MySQL <em>servers</em>,
  but clients can have (at least in theory) more than this.
</s-arg>
<s-arg name = "fetch.default.rec">
  number of records to fetch at one time from the database.
  (The <s-method>fetch</s-method> method uses this number as a default.)
</s-arg>
<s-arg name = "force.reload">
  should we reload (reinitialize) the client code?
  Setting this to <code>TRUE</code> allows you to change
  default settings.  Notice that all connections should be closed
  before re-loading.
</s-arg>
</s-args-optional>
<s-value>
An object <s-class>MySQLManager</s-class> that extends 
<s-class>dbManager</s-class> and 
<s-class>dbObjectId</s-class>.
This object is required to create connections
to one or several MySQL database engines.
</s-value>
<s-side-effects>
The R/S client part of the database communication is initialized,
but note that connecting to the database engine needs to be done through
calls to <s-function name="dbConnect.sgm">dbConnect</s-function>.
</s-side-effects>
<s-details>
This object is a singleton, that is, on subsequent invocations
it returns the same initialized object. 
<p>
This implementation allows you to connect
to multiple host servers and run multiple connections on each server
simultaneously.
</s-details>
<s-section name = "USER AUTHENTICATION">
The preferred method to pass authentication parameters to the
server (e.g., user, password, host) is through the MySQL configuration
file <code>$HOME/.my.cnf</code>.
Since specifying passwords on calls to 
<s-function name="dbConnect.sgm">dbConnect</s-function>
is a very bad idea (and so is specifying passwords through
shell variables),
the client code parses the configuration file <file>$HOME/.my.cnf</file>;
this file consists of zero or
more sections, each starting with a line of the form 
<code>[section-name]</code>, for instance
<s-example>
$ cat $HOME/.my.cnf
# this is a comment
[client]
user = dj
host = localhost

[rs-dbi]
database = s-data

[lasers]
user = opto
database = opto
password = pure-light
host = merced
...
[iptraffic]
host = data
database = iptraffic

</s-example>
This file should not be readeable by anybody but you. 
Inside each section, MySQL parameters may be specified one per line
(e.g., <code>user = opto</code>).  
The R/S MySQL implementation always parses the <code>[client]</code>
and <code>[rs-dbi]</code> sections, but you may define you own
project-specific sections to tailor its environment; 
if the same parameter appears more than once, the last
(closer to the bottom) occurrence is used.
<p>
If you define a section, say, <code>[iptraffic]</code>,
then instead of including all these parameters in the
call to <code>dbConnect</code>, you simply supply the
name of the <code>group</code>,
e.g., <s-expression>dbConnect(mgr, group = "iptraffic")</s-expression>.
<p>
The most important parameters are <code>user</code>, 
<code>password</code>, <code>host</code>, 
and <code>dbname</code>.
<p>
<em>NOTE</em>: The <code>dbname</code> cannot go in the
<code>[client]</code> section, but you may safely include 
it under the <code>[rs-dbi]</code> section or one you define
yourself.
<p>
See the documentation at
<url url = "http://www.mysql.org" name = "MySQL Web site">
for details.
<s-section name = "REFERENCES">
See <url name = "The Omeaga Project for Statistical Computing"
             url = "http://www.omegahat.org">
for more details on the R/S database interface.
<p>
See <url url="http://www.mysql.org" name = "MySQL Web site">
for details on MySQL.
</s-section>
<s-see>
<descrip>
<tag>On database managers:</tag><p>
<s-function name="dbManager.sgm">dbManager</s-function>
<s-function name="MySQL.sgm">MySQL</s-function>
<s-function name="Oracle.sgm">Oracle</s-function>
<s-function name="load.sgm">load</s-function>
<s-function name="unload.sgm">unload</s-function>
<tag>On connections, SQL statements and resultSets:</tag><p>
<s-function name="dbExecStatement.sgm">dbExecStatement</s-function>
<s-function name="dbExec.sgm">dbExec</s-function>
<s-function name="fetch.sgm">fetch</s-function>
<s-function name="quickSQL.sgm">quickSQL</s-function>
<tag>On transaction management:</tag><p>
<s-function name="commit.sgm">commit</s-function>
<s-function name="rollback.sgm">rollback</s-function>
<tag>On meta-data:</tag><p>
<s-function name="describe.sgm">describe</s-function>
<s-function name="getVersion.sgm">getVersion</s-function>
<s-function name="getDatabases.sgm">getDatabases</s-function>
<s-function name="getTables.sgm">getTables</s-function>
<s-function name="getFields.sgm">getFields</s-function>
<s-function name="getCurrentDatabase.sgm">getCurrentDatabase</s-function>
<s-function name="getTableIndeces.sgm">getTableIndeces</s-function>
<s-function name="getException.sgm">getException</s-function>
<s-function name="getStatement.sgm">getStatement</s-function>
<s-function name="hasCompleted.sgm">hasCompleted</s-function>
<s-function name="getRowCount.sgm">getRowCount</s-function>
<s-function name="getAffectedRows.sgm">getAffectedRows</s-function>
<s-function name="getNullOk.sgm">getNullOk</s-function>
<s-function name="getInfo.sgm">getInfo</s-function>
</descrip>
</s-see>
<s-examples>
<s-example>
# create a MySQL instance and create one connection.
> m <- dbManager("MySQL")
> m
MySQLManager id = (7269) 

# open the connection using user, passsword, etc., as
# specified in the "[iptraffic]" section of the 
# configuration file file <file>$HOME/.my.cnf</file>
> con <- dbConnect(m, group = "iptraffic")
> rs <- dbExec(con, "select * from HTTP_ACCESS where IP_ADDRESS = '127.0.0.1'")
> df <- fetch(rs, n = 50)
> hasCompleted(rs)
[1] FALSE
> df2 <- fetch(rs, n = -1)
> hasCompleted(rs)
[1] TRUE
> close(rs)
> dim(quickSQL(con, "show tables"))
[1] 74   1
> getTables(con)    
</s-example>
</s-examples>
<s-keywords>
<s-keyword>RS-DBI</s-keyword>
<s-keyword>MySQL</s-keyword>
<s-keyword>databases</s-keyword>
<s-keyword>RDBMS</s-keyword>
<s-keyword>manip</s-keyword>
<s-keyword></s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>







